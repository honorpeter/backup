流处理器族：
        流处理器族SM是GPU中运行CUDA内核函数的部分 每一个SM包含：
            上千上万个可以被划分到执行线程的寄存器
            几种类型的缓存
                用以在线程之间快速交换数据的共享内存
                快速分发从常量内存中读取数据的常量内存
                从纹理内存中聚合带宽的纹理缓存
                减少本地访问或全局内存造成延迟的一级缓存
            线程束调度器
            整形变量与浮点型变量操作的执行核心

        SM的发展已经经过3,4代了 不同代功能越多

内存：
        寄存器：
            每个SM中包含成千上万个32寄存器，当内核启动时，这些寄存器会被分到
                指定的线程中

            可以使用命令选项 --ptxas 和--verbose来让nvcc报告一个内核使用
                的寄存器的数量，一个内核使用寄存器数量可以影响到每个SM内
                可以装载的线程数，  可以通过--ptxas-options-maxregcont N
                来指定最大寄存器数目
            别名使用：
             
        本地内存：
                用以在线程之间快速交换数据的共享内存
                快速分发从常量内存中读取数据的常量内存
                从纹理内存中聚合带宽的纹理缓存
                减少本地访问或全局内存造成延迟的一级缓存
            线程束调度器
            整形变量与浮点型变量操作的执行核心

        SM的发展已经经过3,4代了 不同代功能越多

内存：
        寄存器：
            每个SM中包含成千上万个32寄存器，当内核启动时，这些寄存器会被分到
                指定的线程中

            可以使用命令选项 --ptxas 和--verbose来让nvcc报告一个内核使用
                的寄存器的数量，一个内核使用寄存器数量可以影响到每个SM内
                可以装载的线程数，  可以通过--ptxas-options-maxregcont N
                来指定最大寄存器数目
            别名使用：
             
        本地内存：
            asdf    用以在线程之间快速交换数据的共享内存
            快速分发从常量内存中读取数据的常量内存
            从纹理内存中聚合带宽的纹理缓存
            减少本地访问或全局内存造成延迟的一级缓存
        线程束调度器
        整形变量与浮点型变量操作的执行核心

    SM的发展已经经过3,4代了 不同代功能越多
内存：
        寄存器：
            每个SM中包含成千上万个32寄存器，当内核启动时，这些寄存器会被分到
                指定的线程中

            可以使用命令选项 --ptxas 和--verbose来让nvcc报告一个内核使用
                的寄存器的数量，一个内核使用寄存器数量可以影响到每个SM内
                可以装载的线程数，  可以通过--ptxas-options-maxregcont N
                来指定最大寄存器数目
            别名使用：
             
        本地内存：
            本地内存是用来容纳寄存器溢出的数据，病存储着被索引的局部变量

        全局内存：
            原子操作：
                atomciAdd
                atomicSub
                atomicExch
                atomicMin
                atomicMax
                atomicInc
                atomicDec
                atomicAS    比较并交换
                atomicAnd
                atomicOr
                atomicXor
            所有这些函数支持32位整型变量
                SM1.2以后加入对64位 ADD  Exch  CAS支持
                SM2.0以后 ADD加入对32位浮点数支持
                SM3.5后 加入Min     Max     And     Or  Xor对64支持
            可以使用nvcc选项 --gpu-architecture指定架构 会自动变得可用


    栅栏和一致性：
        __syncthreads()内置函数会等待线程块中的所有线程到达以后才继续执行
            等待，直到所有的 由线程发起的所有共享内存访问  对线程块中所有的
            线程可见
        threadfence_block() 等待，直到所有的 由线程发起的所有共享内存和全局
            内存访问    对线程块中所有的线程可见
        threadfence()   等待， 直到所有的由线程发起的所有共享内存和全局内存
                访问    对一下可见：
                    线程块中所有访问共享内存的线程
                    设备中所有访问全局内存的线程
        threadfence system()    针对SM2.x

数学库函数：    
        image/math*
        大多数使用float进行运算的函数 会在函数名之后加一个 f
            如： double sin(double angle);
                float sinf(float angle);
                在表中 表示为sin[f]

            

        








