计算机图形系统组成：
        计算    存储    对话    输入    输出



                图形应用数据结构

        图形软件 图形应用软件
                
                图形

图形系统
        
        图形硬件
                图形输入设备  键盘 鼠标  三维鼠标 语音。。。


分辨率：
        屏幕分辨率  
                屏幕 。。。 1024 768
        显示分辨率  
                显示器分辨率
                分为文本模式  图像模式        
        显卡分辨率
                给显示器显示的。。。。


                显示器的点聚：
                    一般 0.28

            显示器的点距：
                一般 0.28nm就行了

            显卡：
                可以处理 显示  解放cup的功能

图形图像的区别：
            图形：
                矢量图  使用数学方式来存储的
            图像：
                矩阵点  位图
        属性：
            几何属性：
                    边 。。。。角。。。
            非几何属性：
                    光照。。。明暗 纹理

位图和矢量图的区别：
        存储方式区别：
            位图：  要存储每个像素的位置了颜色信息
            矢量：  要存储数据公式的参数
        缩放的区别：
            位图：  和分辨率有关  放大之后 失真
            矢量图：和分辨率无关 放大时候 不失真
        存储格式的区别：
            位图：  BMP     TIFF    GIF     JPEG    PNG
            矢量图：DXF     SVG     EPS     WMF     EMF

        位图的真实感 更加逼真

直线的三种画法：
        DDA划线算法
        中点划线算法
        Bresenham算法

多边形的画法与填充：
        表示方法：
            顶点表示
                几何意义强
                占内存少
                易于几何表示
            点阵表示：
                内部的像素的集合

        已知顶点表示 推出 内部像素
            多边形分类：
                凸多边形：
                    任意两点一定在多边形内
                凹多边形：
                    有一部分两点的连线 不在多边形内
                含内环的多边形：
                    多边形中含有多边形
        多边形扫描算法：
                已知顶点 求内部像素位置
                    X扫描算法
        区域填充:
                点阵形式的多边形    
                从 种子点开始 到周围开始渲染    :种子填充算法
                    四连通  区域 
                        原理:
                            假设在多边形区域内部有一像素已知
                            由此触发找到区域内所有像素 用一定的颜色
                            或灰度填充

                            假设:区域采用边界定义 
                        算法原理:  递归算法 效率不高
                            种子像素如站 当栈非空时重复执行如下操作
                                站定像素出栈
                                将出栈像素制成要填充色
                                按左 上 右 下顺序检查与栈像素相邻的死歌像素
                                    若 其中某个像素不在边界且未置成填充色
                                    则把该像素如站
                    八连通  区域
        反走样:
                走样:画直线 发生锯齿性
                解决由于 离散像素表示 连续图形产生的失真 解决走样
            反走样技术
                 采用分辨率高的显示器
                 "模糊" 产生平滑
                1 非加权区域采用方法
                    根据物体的覆盖率 来计算像素
                2 加权区域采用方法
                    反走样效果更好
                        距离像素中心的距离越近 越亮
                        采用离散计算方法 
                            将一个像素分为九分
                                1   2   1
                                2   4   2
                                1   2   1

        







