虚拟内存:
        放到外存上 让内存空间更大

        为了解决内存不够用:
            方案:
                覆盖:           一个程序运行 内存不够了
                    在较小的可用的内存中运行较大的程序
                    将程序划分功能相对独立的功能
                    分别放入内存执行
                局部性原理:
                    程序在执行一段时间内 执行的指令和访问的数据 局限
                        在较小的区域内
                    时间局部性:
                    空间局部性:
                    分支局部性:
                        一条跳转指令的两次跳转 位置很可能相同 
                交换:       程序之间的交换
                    多个程序执行的过程中 不够用的时候 将一些进程放到外存
                虚拟内存:
                    思路:把不长用的内存块放到外存中
                    原理:
                        装载程序时:
                            只将当前执行需要的部分页面或段载入到内存
                        执行 指令中需要的指令或数据不在内存中 缺页
                            处理器通知操作系统将相应的页面或段调入内存
                        操作系统将内存中暂时不用的页面或段保存到外存中
                    虚拟页式存储:
                        思路:
                            当用户程序要加载到内存运行时 只装入部分页面 程序
                                运行
                            进程在运行中发现有需要的代码或数据不在内存时 
                                发出缺页中断
                            操作系统在处理缺页异常时 将外存中相应的页面加载
                                到内存中 使得进程可以继续执行
                        x86的硬件 页管理:
                            页表项后 12位的信息(页表项 页目录 页表 页表项)
                                访问位  修改位 保护位 驻留位

                                驻留位:表示 该页是否在内存中
                                修改位:表示 该页是否在内存中修改过
                                        修改了 需要写到外存中
                                访问位:该页是否被访问过
                                保护位: 可读  可写 可执行 
                                用户态标示
                                保留位
                        
                        缺页异常:
                                执行一条指令    寻找页目录  寻找页表 页表项
                                看是否在内存中  在执行      不在产生缺页异常
                                操作系统在外存中寻找页      在内存中寻找空白
                                页      如果有直接复制过来  没有    页面置换
                                算法    将不常用的换出去    修改驻留位  执行
                            外存保存到那里:
                                linux swap分区
                                windows 文件里

                                可执行代码 放在原来的文件中
                                数据段 堆栈 放在swap分区中
                                动态库      放在各自的目标文件 










