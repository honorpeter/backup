Storage Management:

文件系统：
    文件类型：  
            普通文件
                    文本文件：      字符集的问题
                    非文本文件：    不是可显示的字符  2进制 图片 视频
                                文件类型：通过 二进制打开  前几个 标记
                操作系统不管里面的内容 只记录属性：
                    modify 是指的是 文件的内容改了
                    change 是指的是 文件的属性该了 所有者。。。
            目录文件        目录树
            设备文件。。。。。。
             
文件树形存储：
        文件由三部分组成： 名字     内容         属性  
            i node里面放的是 属性   有一个指针 指向内容 
            名字放在：  所在目录的表中 这个名字 对应这个文件的 i node
            这样名字和属性分开 独立  按名字访问 从名字找到i node在访问内容
                如果从i node找到名字 几乎是不可能的
        硬链接：
            多出来一个名字 指向同一个 i node
        软链接：
            多出来一个名字 指向文件名称

        目录的内容是：  里面的文件和目录的名字 和对应的i node

        文件权限： rwx 对人而言  还有其他三个权限 不是对人而言
            SUID：只对 可执行的二进制文件有效
                不过是谁执行这个程序 都以这个程序的主人身份来执行这个文件
                u+s
            SGID ： 只对 目录有效
                不管是谁 在这个目录里面创建文件 这个文件的所属组 都是
                这个目录所在的所属组
                g+s
            SCAT：  只对 目录有效
                这个目录的 文件 只能被她的拥有者产出 其他人不行 
                0+t ??
                也可以改变 0750  第一位0变是这几个权限的设置


        UNIX文件怎么放在硬盘上：
            多级指针： 每个块1kB
                如果文件 12kb之内
                    从 i node 出来12之内的指针 每个指针指向一个块 1kb
                如果文件 12kb 268kb之间
                    从 i node 再出来一个指针 指向一个块 1kb这个块放指针
                        每个指针在指向一个块 放数据 1kb
                如果文件 大于268kb  64M+268kb
                    从 i node 再出来一个指针 第14个指针
                        这个指针 指向一个块 放指针 再指向一个块 放数据
                如果 文件 大于64M+268kb   16G
                    。。。。。。。。。
                如果大于16G的话 增大块的大小

        文件系统如何存放：
            ext2
                开始存放 超级快（存放很多重要的信息 块的大小 i node区和
                    数据块的比值  每隔一千多个块需要备份 空块的指针）
                    i node区
                    数据区
                格式化硬盘的时候 会设定 i node区和数据区的比值NBPI
                    还要指定：块的大小
            linux文件系统挂载
                几个文件系统 可挂在一起 mount  
                每个文件系统内 都有一个唯一的i node
            windows
                文件系统并列的 如A B C D盘
        备份：
          备份方式：
            全局备份： 几乎不可能
            增量备份：
                    第一天 第二天 第三天。。。。都是以 最原始的数据为原本
                        备份差异 
            差异备份:
                    第一天 第二天 第三天。。。。第一天 以原始的数据为原本
                        备份差异  第二天 以第一天的为。。。。

         备份介质：
            磁带
            光盘

        linux dd命令： 可以将整个硬盘复制到一个文件 将整个分区复制一个文件
                        很强大
                        它没有分区的概念 直接从第一个字节开始复制
                    dd if=/dev/sda of=/mnt/hh  bs=1M  count=23
                                        bs  block size=1M   复制23块
                                        没有 count的话 无穷无尽 整个硬盘
                    dd if=/dev/sda of=/media/hh bs=512  count=1    
                                        备份 第一个硬盘的扇区 引导扇区
                    dd if=/dev/zero of=/dev/sda 
                                        在整个硬盘上写0 全部都是0
                                        在写1   再来回几次
                                        数据就恢复不过来了
磁盘调用算法：
    磁盘： 盘子一直匀速的转动   磁头只进行前后 移动读取扇区
    主板：BIOS  c 0~1023  h 0~255   S 1-63
        算法： 先来先服务
                找最近的来
                电梯模式

    LVM：逻辑卷管理  作为文件系统的容器
        一般使用分区做为文件系统的容器 ： 但分区 不可以跨硬盘
            不能动态的改变 分区的大小  LVM都可以
        物理卷： 可以是一个分区 也可以是一个硬盘
        卷组：  多个物理卷在一起  块大小是一定的
                几个块 可以当做容器 放文件系统
        分区：存放文件系统  不可以跨分区 相当于容器
存储管理：  从小到达的概念
    1  文件 目录    文件系统        分区    硬盘
            不能动态的改变 分区的大小  LVM都可以
    2  文件 目录    块              文件系统    多个块  硬盘    卷组
            LVM 很多优点
                




                    
                
                



存储物质：
    磁盘：
        硬盘:
            硬盘由 很多的类似光盘放在一起 组成 每一个光盘上都有上下两个磁针
            访问参数:  第几柱面  那个面（上或下）  第几扇区 CHR
            
    使用flash芯片：
        u盘
    光盘：
