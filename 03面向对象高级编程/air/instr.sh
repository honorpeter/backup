编写一空栈游戏：
        需求分析：  黑盒分析
                游戏者操作一架飞机与其他敌机战斗
                飞机发射子弹
                定期出现补给品
                被敌机集中生命值减少
                油和子弹有限 需要及时补充
                碰撞敌机 或生命值小于0或油用光 失效
                敌机定时补给
                全歼所有敌机胜利
                在战斗中任何时间可以保存游戏 一边恢复

        思考下一步：
                可以直接写代码
                        如果写了客户不满意那么  。。。。。
                        .....
                可以先建立UML模型
                        所以最好先建立UML模型

        准确描述系统的边界：
        系统与外部对象之间的交互


        系统分析：白盒分析
                类图：
                        如何识别类：
                            游戏参与者
                            从现实世界想象
                                战场 飞机 补给器 
                        建立关系：
                            关联关系
                                聚合关系 整体与局部关系
                            泛化关系
                        识别类的属性和方法
                顺序图：
                        类图中的每个对象是如何协作的
                        顺序图对类图进行了补充
        系统设计：
                问题域设计
                    复用
                    优化
                    扩展
                人机交互设计
                    界面  声音
                    尽可能复用类库
                数据设计
                分布设计
                控制驱动设计            
                    识别主动类
                        不经过接受其他对象的消息
                        可以主动向其他对象发送消息
                        或则向自己发送消息
                    决定线程还是进程实现
                        进程的对象类别
                        进程内对象交互方式
                        进程与线程的交互方式
                        两则之间是同步还是异步
            分析要以现实情况为主
            设计要在贴近现实的同时 具备可实施性
                图形显示：
                    两个进程
                        一个进程负责在内存缓冲区写图片
                        另一个线程负责将缓冲区的内容复制到显示
                精灵线程：
                    。。。
                数据管理：
                    。。。。


        
            









