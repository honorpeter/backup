总结：
        模拟现实场景  几个场景 想清系统边界
        识别参与者      
                人员
                外部系统
                设备
        识别用况：从参与者的角度出发
                一个页面 功能 
        用况图： 参与者和 用况
            理清用况之间的关系 参与者和用况之间的关系


usecase图的历史与黑盒视角：
        。。。。。。。
        将系统看做一个黑盒 不考虑其怎么实现

        怎么做？
            1 划定系统边界
                系统和用户交互的地方。。。。    了解系统对外界的作用。。。
                了解交互的功能 相当于窗户
            2. 识别参与者
                每个用户和系统发生交互  可能有多个功能
                每个功能可能就是一个usecase

            3 识别usecase
参与者的概念：
        识别参与者：
            参与者：
                位于系统之外 但又与系统进行交互
                        交互：  参与者可以发出对系统服务的请求
                                按系统的要求提供服务
        当识别完所有的参与者和系统之间的交互关系的时候 黑盒分析结束了
            一个参与者的一个实例代表以一种特定的方式与系统进行的单独的交互
            硬件与系统交互： 借助很多的接口
            软件与系统佳偶： 借助很多协议 TCP/IP
        参与者之间的泛化关系：
            参与者与参与者之间拥有共同的组成部分时
    识别参与者的策略与技巧：
            1 首先将那个于启动系统行为的参与者
            2 从用户 外部系统和设备三个方面发现参与者
                用户：
                    从直接使用系统的人员中发现参与者    
                        直接使用。。不是间接
                    不要识别特定的人    而是一些角色 集合
                外部系统：
                    所有与系统交互的外部应用系统都是参与者
                        外部应用系统可以是其他子系统、上级系统或任何与
                        它进行协作的系统。
                设备:
                    识别所有与系统交互的设备
                    与系统相连的设备
                    向系统提供外界信息或系统的控制下运行
                    通常,不包括监视器、键盘、鼠标和其它的标准的
                        用户接口类型设备
                    考虑外部传感器(输入信息)和受控马达(输出信息)
                外部事件:   尽可能的不要作为参与者 因为没有交互行为只有发送
                    当我们构造实时和异步交互的系统时,将外部事件识别为
                        潜在的参与者就变得更加重要了。
                    

            3 通过识别一般的或较特殊的角色来组织参与者
        用况：
            定义：  是参与者使用系统的一项功能
                    用况是对用户需求（主要是功能需求）的规范话描述
        用况与参与者之间的关系：关联关系    没有方向
            定义：关联是参与者在用况中的参与（也就是参与者实例与用况实例
                    之间的相互通信）
                    任何一方都可以发送和接受消息
                一个参与者可以对应多个usecase
                一个usecase也可以对应多个参与者：
                        参与者之间通过系统实时交互
                        参与者之间与系统处于同一控制流: 一个线程

        用况与用况之间的关系：
                扩展关系：
                    从用况A到用况B的扩展关系是指， 用况B的实例是可以
                    被用况A指定的行为扩充， 行为被插入到由B中的的扩展点
                    定义的位置  
                    处理一些特殊的情况的 有时候调用 有时候不掉用  
                    条件调用  if语句  将大的usecase插入到大的usecase
                    两个usecase重复利用一个 功能 可以这样扩展关系
                扩展点：
                    条件调用
                包含关系：
                    将小的usecase插入到大的usecase 
                    每次都调用  无条件的使用。。。
                泛化关系：
                    覆盖和重写父用况的功能
        用况分类： 三个维度  可以正交
                高层用况和底层用况
                    
                本质用况和具体用况

                主要用况次要用况
        用况和场景：
                用况是对场景的概况      对大量场景的提升

    捕获用况的策略：
            1 从简单的场景  提取

        

        参与者和usecase分组：
            同样的参与者： 一个参与者对应几个usecase
            共同的实体：
                        几个参与者围绕共同的实体
            特定的工作流：
                        
        使用各种关系    来减少重用。。。。



            

                










