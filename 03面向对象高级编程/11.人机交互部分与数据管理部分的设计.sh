面向对象的系统设计
            人机交互与控制驱动部分的设计

            人机交互：
                 通过各种交互  键盘 鼠标 人脸  .....
    控制驱动部分设计：
            控制流： 进程或线程的别称  是一个处理机上顺序执行的动作序列 
            有多个任何（控制流）并发执行的系统 

            顺序系统：
                一段时间内做一件事情  顺序zuo
            并发系统：
                多线程 或多进程 系统
            选择要点：
                实时显示 画面  一个进程直接执行 下来视频就变成了幻灯片

                识别进程和线程： you know
            如何设计控制驱动部分：
                选择软件体系结构风格：
                    分布式系统的体系结构风格：硬件体系结构风格
                         这几+仿真中断体系结构
                         文件共享体系结构
                            借助与协议 进行文件复制。。。
                         客户-服务器体系结构
                            结构化语言 查询。。。。 
                         二层客户-服务器体系结构
                            
                         对等式客户-服务器体系结构
                         三层客户-服务器体系结构
                         瘦客户-服务器体系结构
                            现在的浏览器服务器体系结构  网络发展的过程
                        
                确定系统的分布方案：
                识别控制流：
                    OOA定义的主动对象
                    系统的并发需求 索要求的多控制流
                    系统分布方案所需求的多控制流
                    为了提高性能而增设的控制流
                    为了实现方面设立的控制流
                    对异常事件的处理
                    实现并行计算
                    设置起协调作用的
                控制流之间常用的通信机制主要有：
                    操作调用
                        同步调用
                    邮箱
                        异步调用
                    共享存储器
                    远程过程调用RPC

                    同步：   线程之间的协调问题
                        主线程产生2个线程 
                            主线程可以协调这两个进程 
                            也可以不管他们 让他们之间相互同步
                            也可以 线程1 调用线程2....
                        顺序的Sequential
                            每个时刻只有一个控制流 访问
                        监护的Guarded
                        并发的Concurrent

                        
                定义控制流：
                模型进程见和线程间的通信：

        线程模式：
                消息队列：
                    可以发送异步消息
                中断模式：
                    应对紧急情况 及时响应
                    中断点 和 中断向量 来实现
                卫式调用模式：
                    提供跨越线程边界的及时响应 
                    如果别人正在调用 休眠
                汇合模式：
                    中间一个类 进行协调  将调用权交给这个类
                循环执行模式：
                    线程调度器
                循环赛模式：
                    时间调度算法
                静态优先级：
                    不同优先级不同的时间片
                动态优先级：
                    。。。。
                    


                      








