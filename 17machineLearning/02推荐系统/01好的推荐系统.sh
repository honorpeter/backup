什么是推荐系统:
    我们可以发现推荐系统就是自动联系用户和物品的一种工具,它能够在信息
        过载的环境中帮助用户发现令他们感兴趣的信息,也能将信息推送给对
        它们感兴趣的用户。
    推荐系统应用场地:
        电子商务:
            个性推荐
                物品相似性
                根据facebook的人的各种关系
            打包销售
        电影和视频
        个性化音乐
        社交网络
        个性化阅读
        基于位置的推荐  
                美团饭馆 
        个性化邮件
        个性化广告

推荐系统评测:
        一个完整的推荐系统一般 存在3个参与方:用户、物品提供者和提供推荐系统
            的网站。以图书推荐为例, 首先,推荐系统需要满足用户的需求,给用户
            推荐那些令他们感兴趣的图书。其次,推荐系统要 让各出版社的书都能
            够被推荐给对其感兴趣的用户,而不是只推荐几个大型出版社的书。
            最后, 好的推荐系统设计,能够让推荐系统本身收集到高质量的用户反馈,
            不断完善推荐的质量,增加 用户和网站的交互,提高网站的收入。因此
            在评测一个推荐算法时,需要同时考虑三方的利益, 一个好的推荐系统
            是能够令三方共赢的系统。

        好的推荐系统不仅仅能够准确预测用户的行为,而且能够扩展用户的视野,
            帮助用户发现那些他们可能会感兴趣,但却不那么容易发现的东西。同时,
            推荐系统还要能够帮助商家将 那些被埋没在长尾中的好商品介绍给可能
            会对它们感兴趣的用户。
实验方法:
        离线实验
        用户调查
        在线实验    ＡＢ实验

评测指标:
        1. 用户满意度
            用户作为推荐系统的重要参与者,其满意度是评测推荐系统的最重要指标
                但是,用户满意 度没有办法离线计算,只能通过用户调查或者在线实
                验获得。
        2. 预测准确度
            预测准确度度量一个推荐系统或者推荐算法预测用户行为的能力。这个指
                标是最重要的推荐 系统离线评测指标

            由于离线的推荐算法有不同的研究方向,因此下面将针对不同的研究方向
                介绍它们的预测准确度指标。

            评分预测:
                很多提供推荐服务的网站都有一个让用户给物品打分的功能,
                评分预测的预测准确度一般通过均方根误差(RMSE)和平均绝对误差
                    (MAE)计算 对于测试集中的一个用户u和物品i,令r(ui) 是用户
                    u对物品i的实际评分,而 r ˆ(ui) 是推荐算法给出的预测评分,
                    那么 RMSE 的定义为: 每项差的平方和 除以 总数 再开方
                    MAX定义为:  每项差的绝对值的和 除以 总数
            def RMSE(records):
                return math.sqrt(\
                    sum([(rui-pui)*(rui-pui) for u,i,rui,pui in records])\
                    / float(len(records)))
            def MAE(records):
                return sum([abs(rui-pui) for u,i,rui,pui in records])\
                    / float(len(records))
                    其中列表 records 存放用户评分数据,令 records[i] = 
                    [u,i,rui,pui] ,其中 rui 是用户 u 对物品 i 的实际评分
                    pui 是算法预测出来的用户 u 对物品 i 的评分

            TopN 推荐:
                网站在提供推荐服务时,一般是给用户一个个性化的推荐列表,这种
                    推荐叫做 TopN 推荐。TopN 推荐的预测准确率一般通过准确率
                    ( precision ) / 召回率( recall )度量
                令 R(u) 是根据用户在训练集上的行为给用户作出的推荐列表,而
                    T(u) 是用户在测试集上的行为列表。那么,推荐结果的召回率
                    定义为:
                    准确率:
                    def PrecisionRecall(test, N):
                        hit = 0
                        n_recall = 0
                        n_precision = 0
                        for user, items in test.items():#所有的用户都要进行
                            rank = Recommend(user, N)   #推荐算法
                            hit += len(rank & items) # &取集合中相同的元素
                            n_recall += len(items)
                            n_precision += N
                        return [hit / (1.0 * n_recall), hit / (1.0 * n_precision)]
                    有的时候,为了全面评测 TopN 推荐的准确率和召回率,一般会选
                    取不同的推荐列表长度 N , 计算出一组准确率 / 召回率,然后
                    画出准确率 / 召回率曲线( precision/recall curve )。
        TopN 推荐更符合实际的应用需求。也许有一部电 影用户看了之后会给很高的
            分数,但用户看的可能性非常小。因此,预测用户是否会看一部电影, 
            应该比预测用户看了电影后会给它什么评分更加重要。因此,本书主要
            也是讨论 TopN 推荐


        3. 覆盖率:
            覆盖率( coverage )描述一个推荐系统对物品长尾的发掘能力
                最简单的定义为推荐系统能够推荐出来的物品占总物品集合的比例。
                在信息论和经济学中有两个著名的指标可以用来定义覆盖率。
                第一个是信息熵:
                第二个指标是基尼系数( Gini Index ):
                def GiniIndex(p):
                j = 1
                n = len(p)
                G = 0
                for item, weight in sorted(p.items(), key=itemgetter(1)):
                    G += (2 * j - n - 1) * weight
                return G / float(n - 1)
                这里i j是按照物品流行度p()从小到大排序的物品列表中第j个物品
                这里 p(i) 是物品 i 的流行度除以所有物品流行度之和

            马太效应,即所谓强者更强,弱者更弱的效应。
                推荐系统的初衷是希望消除马太效应,使得各种物品都
                能被展示给对它们感兴趣的某一类人群。但是,很多研究表明现在主
                流的推荐算法(比如协同过 滤算法)是具有马太效应的。评测推荐系
                统是否具有马太效应的简单办法就是使用基尼系数。如 果 G1 是从
                初始用户行为中计算出的物品流行度的基尼系数, G2 是从推荐列表
                中计算出的物品流 行度的基尼系数,那么如果 G2 > G1 ,就说明推
                荐算法具有马太效应。
        4. 多样性:
        5. 新颖性
        6. 惊喜度
        7. 信任度
        8. 实时性
        9. 健壮性
                任何一个能带来利益的算法系统都会被人攻击
                搜索引 擎的作弊和反作弊斗争异常激烈
                注入攻击( profile injection attack )
        10. 商业目标







