" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

syntax on                   "语法支持
set nocompatible            "关闭兼容模式
filetype plugin on          "开启插件
set scrolloff=8                 "距离下面5行


"common conf {{             通用配置
"set autoindent              "set ai 开启自动缩进  
""set bs=2                    "在insert模式下用退格键删除 
set showmatch               "代码匹配
"set laststatus=2            " Always show the statusline
""以下三个配置配合使用，设置tab和缩进空格数     
set expandtab               "set et 按backspace删除4个空格
set shiftwidth=4            "set sw=4  缩进尺寸为4个空格   
set tabstop=4               "set ts=4  tab宽度为4个字符      
set cursorline              "为光标所在行加下划线
set number                  "显示行号
set autoread               "文件在Vim之外修改过，自动重新读入
set encoding=utf-8          "gvi内部编码          
set fileencoding=utf-8      "当前编辑的文件编码
set fileencodings=ucs-bom,utf-8,gbk,cp936,gb2312,big5,euc-jp,euc-kr,latin1
"gvim打开支持编码的文件
set hls                     "检索时高亮显示匹配项
set helplang=cn             "帮助系统设置为中文
"set foldmethod=syntax       "代码折叠
"}}

"conf for tabs, 为标签页进行的配置，通过ctrl h/l切换标签等
let mapleader = ','
nnoremap <C-l> gt
nnoremap <C-h> gT
nnoremap <leader>t : tabe<CR>
"
"模仿快捷键，如：Ctrl+A全选，Ctrl+C复制，Ctrl+V粘贴等等
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin


"窗口样式相关
colo desert                             "配色方案为desert   
set guioptions-=T                       "关闭上侧工具栏 
"set guioptions-=r                      "关闭右侧滚动条 


"字体编码相关
"set guifont=新宋体:h18:cGB2312           "gvim字体设置    
"set guifont=新宋体\ cGB2312\ 13           "gvim字体设置    
set guifont=DejaVu\ Sans\ mono\ 15
"set guifont=Umpush:h20:Umpush          "gvim字体设置    
"set langmenu=zh_CN
"let $LANG = 'zh_CN.UTF-8'


language messages zh_CN.utf-8           "解决consle输出乱码   
source $VIMRUNTIME/delmenu.vim          "解决菜单乱码  
source $VIMRUNTIME/menu.vim
let &termencoding=&encoding             "设置终端编码为gvim内部编码encoding
set ambiwidth=double                    "防止特殊符号无法正常显示  


set smarttab
"不生成备份文件，如~index.html
set nobackup
"set nowritebackup
"set noswapfile

"设置相关快捷键
imap ff <Esc>




"conf for plugins {{ 插件相关的配置
"
""pathogen ===
"call pathogen#infect()
"end pathogen ==============================
"

"powerline ==============================
"" set guifont=PowerlineSymbols\ for\ Powerline
" set encoding=utf-8 " Necessary to show Unicode glyphs
" " set nocompatible  " Disable vi-compatibility
set t_Co=256
let g:Powerline_symbols = 'fancy'
 " set laststatus=2   " Always show the statusline
 "end  powerline=========================

" 不同时显示多个文件的 tag ，只显示当前文件的
let Tlist_Show_One_File=1
 " 如果 taglist 窗口是最后一个窗口，则退出 vim
let Tlist_Exit_OnlyWindow=1
" "让当前不被编辑的文件的方法列表自动折叠起来
let Tlist_File_Fold_Auto_Close=1
 "把taglist窗口放在屏幕的右侧，缺省在左侧
let Tlist_Use_Right_Window=1
" "显示taglist菜单
let Tlist_Show_Menu=1
" "启动vim自动打开taglist
" "let Tlist_Auto_Open=1
" "nnoremap <silent>  :TlistOpen<CR>
nmap tg :TlistOpen<CR>
nmap tg :TlistToggle<CR>
" "end taglist ============================== 


" NerdTree ==============================
map <F3> :NERDTreeMirror<CR>
map <F3> :NERDTreeToggle<CR>
nmap me :NERDTree<CR>

           
" visualmark ==============================
" " 根据背景色设置标签颜色，cterm表示为原生vim设置样式
if &bg == "dark"
highlight SignColor ctermfg=white ctermbg=blue guifg=white guibg=peru
else
highlight SignColor ctermbg=white ctermfg=red guibg=grey guifg=RoyalBlue3
endif
 "end visualmark ==============================


" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Enable heavy features.
" " Use camel case completion.
" "let g:neocomplcache_enable_camel_case_completion = 1
" " Use underbar completion.
" "let g:neocomplcache_enable_underbar_completion = 1
" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
        let g:neocomplcache_keyword_patterns = {}
    endif
    let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
" " <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
      return neocomplcache#smart_close_popup() . "\<CR>"
     " For no inserting <CR> key.
     "   "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
endfunction


inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

"inoremap <expr><Space> pumvisible() ? neocomplcache#close_popup() :
""\<Space>"
"使用ctrl +k来选中
"inoremap <expr><C-m> pumvisible() ? neocomplcache#close_popup() : "\<Space>"

" AutoComplPop like behavior.
let g:neocomplcache_enable_auto_select = 1

"tags
set tags+=/home/xiaolong/test/zizhi/crowbar_book_0_1/tags
