snippet php
	<?php
	${1}
	?>
snippet echo
	echo "${1}";
snippet inc
	include '${1:file}';
snippet inco
	include_once '${1:file}';
snippet re
	require '${1:file}';
snippet reo
	require_once '${1:file}';
# $GLOBALS['...']
snippet globals
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet COOKIE['...']
	$_COOKIE['${1:variable}']${2}
snippet ENV['...']
	$_ENV['${1:variable}']${2}
snippet FILES['...']
	$_FILES['${1:variable}']${2}
snippet Get['...']
	$_GET['${1:variable}']${2}
snippet POST['...']
	$_POST['${1:variable}']${2}
snippet REQUEST['...']
	$_REQUEST['${1:variable}']${2}
snippet SERVER['...']
	$_SERVER['${1:variable}']${2}
snippet SESSION['...']
	$_SESSION['${1:variable}']${2}
snippet exit
	exit(${1});
# Start Docblock
snippet /*
	/**
	 * ${1}
	 **/
# Class - post doc
snippet doccp
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @author ${3:`g:snips_author`}
	**/${4}
# Class Variable - post doc
snippet docvp
	/**
	 * ${1:undocumented class variable}
	 *
	 * @var ${2:string}
	 **/${3}
# Class Variable
snippet docv
	/**
	 * ${3:undocumented class variable}
	 *
	 * @var ${4:string}
	 **/
	${1:var} $${2};${5}
# Class
snippet docc
	/**
	 * ${3:undocumented class}
	 *
	 * @packaged ${4:default}
	 * @author ${5:`g:snips_author`}
	 **/
	${1:}class ${2:}
	{${6}
	} // END $1class $2
# Constant Definition - post doc
snippet docdp
	/**
	 * ${1:undocumented constant}
	 **/${2}
# Constant Definition
snippet docd
	/**
	 * ${3:undocumented constant}
	 **/
	define(${1}, ${2});${4}
# Function - post doc
snippet docfp
	/**
	 * ${1:undocumented function}
	 *
	 * @return ${2:void}
	 * @author ${3:`g:snips_author`}
	 **/${4}
# Function signature
snippet docs
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3});${7}
# Function
snippet docf
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3})
	{${7}
	}
# Header
snippet doch
	/**
	 * ${1}
	 *
	 * @author ${2:`g:snips_author`}
	 * @version ${3:$Id$}
	 * @copyright ${4:$2}, `strftime('%d %B, %Y')`
	 * @package ${5:default}
	 **/
	
	/**
	 * Define DocBlock
	 *//
# Interface
snippet doci
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4:`g:snips_author`}
	 **/
	interface ${1:}
	{${5}
	} // END interface $1
# class ...
snippet classa
	/**
	  *${1}
	  **/
	${2:abstract} class ${3}{
		${4}	
	}
snippet class
	/**
	 * ${1}
	 **/
	class ${2:ClassName}
	{
		${3}
		function ${4:__construct}(${5})
		{
			${6:// code...}
		}
	}
snippet funci
	${1}function(${2});
# define(...)
snippet def
	define('${1}'${2});${3}
# defined(...)
snippet def?
	${1}defined('${2}')${3}
snippet wh
	while (${1:/* condition */}) {
		${2:// code...}
	}
# do ... while
snippet do
	do {
		${2:// code... }
	} while (${1:/* condition */});
snippet if
	if (${1}) {
		${2}
	}
snippet ife
	if (${1:/* condition */}) {
		${2:// code...}
	} else {
		${3:// code...}
	}
	${4}
snippet else
	else {
		${1}
	}
snippet elseif
	elseif (${1}) {
		${2}
	}
# Tertiary conditional
snippet t
	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
snippet switch
	switch(${1}){
		case${2}:
			${3}
			break;
	}
snippet default
	default:
		${1}
		break;
snippet case
	case ${1:value}:
		${2}
		break;
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4: // code...}
	}
snippet foreach
	foreach ($${1:variable} as $${2:key}) {
		${3:// code...}
	}
snippet fun
	function ${1} (${2}){
		${3}
	}
snippet funi
	function(${1});
snippet funa
	abstract function (${1});
snippet func
	${1:protected }function ${2:FunctionName}(${3})
	{
		${4:// code...}
	}
# php 常量定义
snippet get
	$_GET[${1}]
snippet post
	$_POST[${1}]
# $... = array (...)
snippet array
	$${1:arrayName} = array('${2}' => ${3});${4}
#thinkphp
snippet dump
	dump(${1});
snippet this
	$this->${1}
snippet display
	$this->display();
snippet in
	//
snippet info
	/**
	 *${1}
	 **/
snippet isset
	isset(${1});
snippet p
	echo'<pre>';
		print_r(${1});
	echo'</pre>';
snippet while
	while(${1}){
		${2}
	}
#Exception
snippet try
	try{
		${1}
	}
snippet catch
	catch(${1:Exception $e}){
		${2}	
	}
snippet throw
	throw new ${1:Exception}(${2JLK})
snippet list
	list(${1})=${2}
#linux
snippet linux
	#!/usr/local/php/bin/php
#html 
snippet h2
	<h2>${1}</h2>
snippet htmlp
	<p>${1}</p>
