" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif
"打开vim的语法高亮功能
syntax enable
set nocompatible            "关闭兼容模式
filetype plugin on          "开启插件
set scrolloff=8                 "距离下面5行
set noundofile              "关闭生成 .un~文件
"verbose set undofile

"colorscheme darkblue 配色方案

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif



"set autoindent              "set ai 开启自动缩进  
""set bs=2                    "在insert模式下用退格键删除 
set showmatch               "代码匹配
"set laststatus=2            " Always show the statusline
""以下三个配置配合使用，设置tab和缩进空格数     
set expandtab               "set et 按backspace删除4个空格
set shiftwidth=4            "set sw=4  缩进尺寸为4个空格   
set tabstop=4               "set ts=4  tab宽度为4个字符      
set cursorline              "为光标所在行加下划线
set number                  "显示行号
set autoread               "文件在Vim之外修改过，自动重新读入
set encoding=utf-8          "gvi内部编码          
set fileencoding=utf-8      "当前编辑的文件编码
set fileencodings=ucs-bom,utf-8,gbk,cp936,gb2312,big5,euc-jp,euc-kr,latin1
"gvim打开支持编码的文件
set hls                     "检索时高亮显示匹配项
set helplang=cn             "帮助系统设置为中文
"set foldmethod=syntax       "代码折叠

"conf for tabs, 为标签页进行的配置，通过ctrl h/l切换标签等
"let mapleader = ','
"nnoremap <C-l> gt
"nnoremap <C-h> gT
"nnoremap <leader>t : tabe<CR>
"
"模仿快捷键，如：Ctrl+A全选，Ctrl+C复制，Ctrl+V粘贴等等
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

"窗口样式相关
colo desert                             "配色方案为desert   
set guioptions-=T                       "关闭上侧工具栏 
"set guioptions-=r                      "关闭右侧滚动条 


"字体编码相关
"set guifont=新宋体:h18:cGB2312           "gvim字体设置    
"set guifont=新宋体\ cGB2312\ 13           "gvim字体设置    
"set guifont=DejaVu\ Sans\ mono\ 15
set guifont=DejaVu\ Sans\ mono\:h16
"set guifont=Umpush:h20:Umpush          "gvim字体设置    
"set langmenu=zh_CN
"let $LANG = 'zh_CN.UTF-8'


language messages zh_CN.utf-8           "解决consle输出乱码   
source $VIMRUNTIME/delmenu.vim          "解决菜单乱码  
source $VIMRUNTIME/menu.vim
let &termencoding=&encoding             "设置终端编码为gvim内部编码encoding
set ambiwidth=double                    "防止特殊符号无法正常显示  


set smarttab
"不生成备份文件，如~index.html
set nobackup
set nowritebackup
"不生成swap文件
set noswapfile
"设置多少行 多少列
"set lines=60
"set columns=210
"winpos 88 0

"设置相关快捷键
imap ff <Esc>
"() brakets/ parentheses 括号 
imap ;p ()<Esc>i
imap ;b []<Esc>i
imap ;a <Esc>A
imap ;d <Esc>o<Esc>I{}<Esc>i<CR><Esc>O
imap ;s <Esc>A{}<Esc>i<CR><Esc>O
imap ;g <Esc>la
"normal模式下可以使用m开头和tg的
nmap ml i<CR><CR><CR><CR><CR><CR><CR><CR><CR><Esc>9k
nmap m1 I<Tab><Esc>
nmap m2 I<Tab><Tab><Esc>
nmap m3 I<Tab><Tab><Tab><Esc>
nmap m4 I<Tab><Tab><Tab><Tab><Esc>
nmap m5 I<Tab><Tab><Tab><Tab><Tab><Esc>
nmap m6 I<Tab><Tab><Tab><Tab><Tab><Tab><Esc>



"设置都为 可写的空间
set virtualedit=all





""""""""""""""""""""""
"插件相关配置
"""""""""""""""""""""
"powerline ==============================
"" set guifont=PowerlineSymbols\ for\ Powerline
" set encoding=utf-8 " Necessary to show Unicode glyphs
" " set nocompatible  " Disable vi-compatibility
set t_Co=256
let g:Powerline_symbols = 'fancy'
 " set laststatus=2   " Always show the statusline
 "end  powerline=========================
""""""""""""""""""""""
" TagList settings
""""""""""""""""""""""
" 不同时显示多个文件的 tag ，只显示当前文件的
let Tlist_Show_One_File=1
 " 如果 taglist 窗口是最后一个窗口，则退出 vim
let Tlist_Exit_OnlyWindow=1
" "让当前不被编辑的文件的方法列表自动折叠起来
let Tlist_File_Fold_Auto_Close=1
 "把taglist窗口放在屏幕的右侧，缺省在左侧
let Tlist_Use_Left_Window=1
" "显示taglist菜单
let Tlist_Show_Menu=1
" "启动vim自动打开taglist
" "let Tlist_Auto_Open=1
" "nnoremap <silent>  :TlistOpen<CR>
"Tlist_WinHeight和Tlist_WinWidth可以设置taglist窗口的高度和宽度。
"Tlist_Use_Horiz_Window为1设置taglist窗口横向显示
nmap mg :TlistOpen<CR>
nmap mg :TlistToggle<CR>
" "end taglist ============================== 


""""""""""""""""""""""""""""
" Netrw ========= settings
"""""""""""""""""""""""""""'
let g:netrw_winsize = 30
nmap mn :Sexplore!<cr> 

""""""""""""""""""""""""""""""
" BufExplorer
""""""""""""""""""""""""""""""
let g:bufExplorerDefaultHelp=0       " Do not show default help.
let g:bufExplorerShowRelativePath=1  " Show relative paths.
let g:bufExplorerSortBy='mru'        " Sort by most recently used.
let g:bufExplorerSplitRight=0        " Split left.
let g:bufExplorerSplitVertical=1     " Split vertically.
let g:bufExplorerSplitVertSize = 30  " Split width
let g:bufExplorerUseCurrentWindow=1  " Open in new window.
autocmd BufWinEnter \[Buf\ List\] setl nonumber 
nmap mb :BufExplorerVerticalSplit<cr>
""""""""""""""""""""""""""""""
" winManager setting
""""""""""""""""""""""""""""""
" use ctrl n  switch FileExplorer and TagList
" FileExplorer 和 TagList公用一个显示窗口
let g:winManagerWindowLayout = "BufExplorer,FileExplorer|TagList"
let g:winManagerWidth = 30
let g:defaultExplorer = 0
" ctrl w    ctrl f
nmap <C-W><C-F> :FirstExplorerWindow<cr>
"ctrl w ctrl b
nmap <C-W><C-B> :BottomExplorerWindow<cr>
"使用wm打开它
nmap mm :WMToggle<CR>
           
" visualmark ==============================
" " 根据背景色设置标签颜色，cterm表示为原生vim设置样式
if &bg == "dark"
highlight SignColor ctermfg=white ctermbg=blue guifg=white guibg=peru
else
highlight SignColor ctermbg=white ctermfg=red guibg=grey guifg=RoyalBlue3
endif
 "end visualmark ==============================


" Use neocomplcache.
""let g:neocomplcache_enable_at_startup = 1
" Use smartcase
""let g:neocomplcache_enable_smart_case = 0
" Set minimum syntax keyword length.
""let g:neocomplcache_min_syntax_length = 3
""let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Enable heavy features.
" " Use camel case completion.
" "let g:neocomplcache_enable_camel_case_completion = 1
" " Use underbar completion.
" "let g:neocomplcache_enable_underbar_completion = 1
" Define dictionary.
"let g:neocomplcache_dictionary_filetype_lists = {
    "\ 'default' : '',
    "\ 'vimshell' : $HOME.'/.vimshell_hist',
    "\ 'scheme' : $HOME.'/.gosh_completions'
        "\ }

" Define keyword.
""if !exists('g:neocomplcache_keyword_patterns')
        ""let g:neocomplcache_keyword_patterns = {}
    ""endif
    ""let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
""inoremap <expr><C-g>     neocomplcache#undo_completion()
""inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
" " <CR>: close popup and save indent.
""inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
""function! s:my_cr_function()
      ""return neocomplcache#smart_close_popup() . "\<CR>"
     " For no inserting <CR> key.
     """   "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
""endfunction
"understand plugin
":command! UMenu silent: exe “!understand -existing -contextmenu %:p -line ” line(‘.’) ” -col ” col(‘.’) ” -text <cword> &” | redraw!
"map <C-u> :UMenu<CR>


""inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
""inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
""inoremap <expr><C-y>  neocomplcache#close_popup()
""inoremap <expr><C-e>  neocomplcache#cancel_popup()

"inoremap <expr><Space> pumvisible() ? neocomplcache#close_popup() :
""\<Space>"
"使用ctrl +l来选中
""inoremap <expr><C-l> pumvisible() ? neocomplcache#close_popup() : "\<Space>"

" AutoComplPop like behavior.
""let g:neocomplcache_enable_auto_select = 1



"func Hh()
    "set lines=60
    "set columns=210
    "winpos 88 0    
"endfunc
"autocmd BufNewFile  * call Hh()
"autocmd VimResized  * call Hh()
"autocmd FileWritePre * call Hh()

"cscope
if has("cscope")

    """"""""""""" Standard cscope/vim boilerplate

    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cscopetag

    " check cscope for definition of a symbol before checking ctags: set to 1
    " if you want the reverse search order.
    set csto=0

    " add any cscope database in current directory
    if filereadable("cscope.out")
        cs add cscope.out  
    " else add the database pointed to by environment variable 
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif

    " show msg when any other cscope db added
    set cscopeverbose  


    """"""""""""" My cscope/vim key mappings
    "
    " The following maps all invoke one of the following cscope search types:
    "
    "   's'   symbol: find all references to the token under cursor
    "   'g'   global: find global definition(s) of the token under cursor
    "   'c'   calls:  find all calls to the function name under cursor
    "   't'   text:   find all instances of the text under cursor
    "   'e'   egrep:  egrep search for the word under cursor
    "   'f'   file:   open the filename under cursor
    "   'i'   includes: find files that include the filename under cursor
    "   'd'   called: find functions that function under cursor calls
    "
    " Below are three sets of the maps: one set that just jumps to your
    " search result, one that splits the existing vim window horizontally and
    " diplays your search result in the new window, and one that does the same
    " thing, but does a vertical split instead (vim 6 only).
    "
    " I've used CTRL-\ and CTRL-@ as the starting keys for these maps, as it's
    " unlikely that you need their default mappings (CTRL-\'s default use is
    " as part of CTRL-\ CTRL-N typemap, which basically just does the same
    " thing as hitting 'escape': CTRL-@ doesn't seem to have any default use).
    " If you don't like using 'CTRL-@' or CTRL-\, , you can change some or all
    " of these maps to use other keys.  One likely candidate is 'CTRL-_'
    " (which also maps to CTRL-/, which is easier to type).  By default it is
    " used to switch between Hebrew and English keyboard mode.
    "
    " All of the maps involving the <cfile> macro use '^<cfile>$': this is so
    " that searches over '#include <time.h>" return only references to
    " 'time.h', and not 'sys/time.h', etc. (by default cscope will return all
    " files that contain 'time.h' as part of their name).


    " To do the first type of search, hit 'CTRL-\', followed by one of the
    " cscope search types above (s,g,c,t,e,f,i,d).  The result of your cscope
    " search will be displayed in the current window.  You can use CTRL-T to
    " go back to where you were before the search.  
    "

    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>	
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>	


    " Using 'CTRL-spacebar' (intepreted as CTRL-@ by vim) then a search type
    " makes the vim window split horizontally, with search result displayed in
    " the new window.
    "
    " (Note: earlier versions of vim may not have the :scs command, but it
    " can be simulated roughly via:
    "    nmap <C-@>s <C-W><C-S> :cs find s <C-R>=expand("<cword>")<CR><CR>	

    nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>	
    nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>	
    nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>	


    " Hitting CTRL-space *twice* before the search type does a vertical 
    " split instead of a horizontal one (vim 6 and up only)
    "
    " (Note: you may wish to put a 'set splitright' in your .vimrc
    " if you prefer the new window on the right instead of the left

    nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>	
    nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>	
    nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>


    """"""""""""" key map timeouts
    "
    " By default Vim will only wait 1 second for each keystroke in a mapping.
    " You may find that too short with the above typemaps.  If so, you should
    " either turn off mapping timeouts via 'notimeout'.
    "
    "set notimeout 
    "
    " Or, you can keep timeouts, by uncommenting the timeoutlen line below,
    " with your own personal favorite value (in milliseconds):
    "
    "set timeoutlen=4000
    "
    " Either way, since mapping timeout settings by default also set the
    " timeouts for multicharacter 'keys codes' (like <F1>), you should also
    " set ttimeout and ttimeoutlen: otherwise, you will experience strange
    " delays as vim waits for a keystroke after you hit ESC (it will be
    " waiting to see if the ESC is actually part of a key code like <F1>).
    "
    "set ttimeout 
    "
    " personally, I find a tenth of a second to work well for key code
    " timeouts. If you experience problems and have a slow terminal or network
    " connection, set it higher.  If you don't set ttimeoutlen, the value for
    " timeoutlent (default: 1000 = 1 second, which is sluggish) is used.
    "
    "set ttimeoutlen=100

endif
