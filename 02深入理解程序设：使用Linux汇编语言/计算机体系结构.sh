内存结构：
   100 99  98 97 96 95 94 93 92 91  顶部
   90  89  88 87 ...........
   .
   .
   .
   10  9   8   7  6  5  4  3  2  1 开始

 

linux程序的内存布局：
    当程序加载到内存中时 每个.section都被加载到自己的内存区  不同文件中的
        代码段和数据段将被组合起来
        实际指令 (.text)被加载到地址0x080480000 data段紧随其后被加载 在之后
        是.bss段
    linux上可以寻址的 最后一个自己存储位置0xBFFFFFFF  linux的栈从这里开始
    linux程序内存分布图：
                  0xBFFFFFFF
                    环境变量
                    。。。。
                    参数2
                    参数1
                    程序名
                    #变量数目   %esp

                    未映射的内存
                                    中断分割 中断点
                    程序代码及数据
                  0x080480000

        程序的数据段从内存的地步开始 并向上增长  栈从内存的顶部开始
        每次数据入栈的时候都向下移动。 这个栈和数据之间是无法访问的 除非
        告诉内核你需要这样做  如果你尝试访问 分割故障
            原理：每个内存都是 虚拟的
                当你一个程序将要执行的时候 内核将在内存中 寻找一个足够大的
                空间 将0x080480000映射到那里的开始位置  将0xBFFFFFFF映射到
                那个位置的末尾  终端区域没有映射 故不能访问 除非你想内核
                申请使用 内核再映射

    获取更多的内存： 从未映射的内存中占取
        如果需要更多的内存 可以告诉linux你想要新的中断点 而linux会将你需要的
        所有内存映射到 现有中断点与新断点之间 然后将断点移动到你指定的地方
        使用系统调用brk  

关于linux的内存布局：
    http://linuxassembly.org/startup.html
    不同系统虚拟内存：
        http://cne.gmu.edu/modules/vm/
        http://www.nongnu.org/lkdp/files.html

        http://gee.cs.oswego.edu/dl/html/malloc.html

        http://docs.freebsd.org/44doc/papers/malloc.html

                 
    

