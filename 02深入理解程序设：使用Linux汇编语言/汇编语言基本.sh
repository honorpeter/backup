后缀名 一般：
    .s
执行步骤：
    as exit.s -o exit.o 
    ld exit.o -o exit
    这里exit就可以执行了
        exit.o 是机械语言 exit是可执行文件
        ld 是连接器 ： 一般将多个目标文件 和为一个 并且向其中添加 信息
            使内核知道怎么加载和运行这些文件

16位汇编 实际寻址方式是20位    
        指令寻址：  cs:ip       寄存器16用16进制表示 变成4位数 相加变为5位数
                                    使用二进制表示 便是20位
        数据寻址：  ds:sp        和上面一样   
                                因为 寻址由ds和sp一起作用 故sp成为段有16个段
32位汇编 实际寻址方式是48位     
        指令寻址： cs：eip      寄存器 cs 16位  寄存器eip  32位
                                十六进制表示  cs 4位数 eip 8位数 和在一起
                                是 4+8=12（和16位加法不一样）  
                                二进制表示 48位 
        数据寻址：ds：esp       
                                所以有了数据段和指令段  段的概念
                                每改变一个cs值便是一个新的指令段
                                每改变一个ds值 便是一个新的数据段
                                一般程序都 cs 和 ds 相等 所以 公用一个段 
cup是几位的是指 cup可以处理的数据位数 
        




linux系统调用  使用汇编语言：
    movl $1, $eax       #这是退出 程序的linux内核命令号

    movl $0, $ebx       #这是我们 程序退出是 返回给系统的 状态
                        # 范围 0~255   echo $? 可以输出 这里的数字

    int $0x80           # 运行linux内核  进行系统调用 调用完之后 
                        控制权 再次回到你的手中
                        

汇编语法
    汇编语法分为：
        指令(以点开头的) 和 标示符( 不是以点开头的都是表示符)
    .section .data       以 点 开头的都是 指令或伪操作（这些 由 汇编程序处里                                变为机械指令） 
                        .section 指令将程序分为几个 部分 
                        .section .data 是数据段的开始

    .section .text      是存放程序指令的部分

    .globl _start       程序开始位置 _start 是一个符号 符号表示：标志
                            内存的地址 。。。  定义位置的时候 data_iteam: 
                        .globl 表示 _start 是全局的 让内核知道他的位置
                            因为链接的时候 需要用到这个位置

    movl $1, %eax       使用寄存器的时候 需要加 %    $1  表示1
    movl $22, %ebx      
     
    int $0x80           int 表示中断  int 后面加中断号

    








    x86处理器有如下几个通用 寄存器
        通用寄存器
            %eax
            %ebx
            %ecx
            %edx
            %edi
            %esi
        专用寄存器
            %ebp
            %esp
            %eip
            %eflags
            
            
            

