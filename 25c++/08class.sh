构造函数：
    explicit :
            只对构造函数起作用，用来抑制隐式转换 

    可以传参　可以重载
    还可以　初始化成员　使用初始化表
          对象中的一些数据成员除了在构造函数体中进行初始化外还可以通过调
            用初始化表来进行完成, 要使用初始化表来对数据成员进行初始化时
            使用 : 号进行调出:
        Point(int x = 0, int y = 0):xPos(x), yPos(y)　　//使用初始化表
        {
            cout<<"调用初始化表对数据成员进行初始化!\n";
        }
        在 Point 构造函数头的后面, 通过单个冒号 : 引出的就是初始化表, 
            初始化的内容为 Point 类中int型的 xPos 成员和 yPos成员,
            其效果和 xPos = x; yPos = y; 是相同的。
    
            与在构造函数体内进行初始化不同的是, 使用初始化表进行初始化是在
            构造函数被调用以前就完成的。每个成员在初始化表中只能出现一次,
            并且初始化的顺序不是取决于数据成员在初始化表中出现的顺序, 而
            是取决于在类中声明的顺序。

    类中的静态成员：
        在类中 声明的时候 写上static 
        定义静态函数的时候 就不用写static了
        class A{
            static void hello(A *_a);
            int hh;
        };

        void A::hello(A *_a){   // 静态函数调用非静态变量 
                            //编译器调用静态函数时 传递的this变量 强转为A类
            _a->hh;
        }











