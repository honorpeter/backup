如何将自己的思路变清晰：
        对象 + 操作         现有对象在有操作

        对象之间的关系：
                父子关系        兄弟关系


        思考整个东西的发现过程：
                发现的方法：    
                    由已知求未知
                    设置未知 限制条件来求

                    分步简化问题


        将问题 转化看成一样的。。。。。
            ：  1 2 0   是否可以为数列
                找到一个通项公式变可以证明为 一个数列
                因为有三个解确定一个方程    故设二次方程
                求二次方程便可

            怎么求思考


怎么更快的了解一个领域 比较前沿的领域:
    比如 RBM
    论文:
        难度的维度:
            先搜索 学术论文 Introduction
                    An Introduction to Restricted Boltzmann Machines
        语言的维度: 
            Chinese     English
    博客:
        ....

开发程序思考：
    动手之前  
            1 一定要先想好 最大的数据结构 main struct
                                            如：树结构 图结构 。。。。
                                            双向连接 单向。。。
            2 想好 main struct使用语言如何表示 
                                对与python 如何表示 
                                对于所用语言特性如何表示。。。
            3 开发：
                main struct数据结构： 只存在一个实例 
                                    其他用到的时候 传引用 或则全局变量

                    struct实现：
                        可以使用　结构体实现　也可以使用类实现
                    这个通用的main struct应该被其他的文件都包含
                    通用的方法 也放到文件 被其他文件包含
                        可以剔除 包含通用的头文件
                        通用的宏 。。。
                整个项目应该包含在同一个 命名空间之中 
                    在这个项目中应该分为几个 子命令空间
                        子命名空间还可以包含 子空间 包含类
                    使用文件作用域 .c文件最好都是 没有外连接


                头文件处理：
                    头文件应该统一放到 /root/inlcude/目录里面
                        每个文件包含的时候 包含的时候都要以这个目录为根目录
            3:原则：
                客户端 调用API的时候 只需要客户端写就行 不能修改API 

思考过程：
        以时间序列为主线  想清楚每个步骤  流程
            将流程 分阶段       每个阶段的内存结构如何表示 特定语言表示
                每个阶段 再想有几种可能性
                这些所有的可能性 便是主体啊
                    通过用户的输入 在每个阶段选择一个 连接成整个阶段
                        这也就是 数据驱动模型
                    每种可能性的 都需要实现 用户输入 需要那些功能 就注册
                        那些功能


        用户输入 解决方案：
            使用protobuf
            使用解释器
            使用 图形界面  事件驱动型
























